{"version":3,"sources":["countdown/CountdownDisplay.jsx","countdown/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["CountdownDisplay","time","day","hour","minute","second","className","Countdown","calculateDuration","Duration","fromObject","milliseconds","toFormat","split","currentTime","DateTime","local","difference","fromISO","duration","useState","timeRemaining","changeTimeRemaining","newDuration","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAwBeA,G,MAtBU,SAAC,GAA6C,IAAD,IAA1CC,KAAQC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,OACrD,OACE,yBAAKC,UAAU,kBACb,4CACA,yBAAKA,UAAU,kBACb,6BACE,2BAAIJ,GADN,SAGA,6BACE,2BAAIC,GADN,UAGA,6BACE,2BAAIC,GADN,SAGA,6BACE,2BAAIC,GADN,aCoCOE,EA9CG,WAChB,IAAMC,EAAoB,SAAAP,GAAI,OAC5BQ,WAASC,WAAW,CAAEC,aAAcV,IACjCW,SAAS,WACTC,MAAM,MAELC,EAAcC,WAASC,QAEvBC,EADaF,WAASG,QAAQ,uBACJJ,EAC1BK,EACJF,GAAc,EAAIT,EAAkBS,GAAc,CAAC,EAAG,EAAG,EAAG,GAVxC,EAYuBG,mBAAS,CACpDlB,IAAKiB,EAAS,GACdhB,KAAMgB,EAAS,GACff,OAAQe,EAAS,GACjBd,OAAQc,EAAS,KAhBG,mBAYfE,EAZe,KAYAC,EAZA,KAmBtB,GAAIL,EAAa,EAAG,CAClB,IAEMM,EAAcf,EADES,EADJ,KAIlBO,YAAW,WACTF,EAAoB,CAClBpB,IAAKqB,EAAY,GACjBpB,KAAMoB,EAAY,GAClBnB,OAAQmB,EAAY,GACpBlB,OAAQkB,EAAY,OAErB,KAGL,OACE,yBAAKjB,UAAU,aACZW,GAAc,EACb,kBAAC,EAAD,CAAkBhB,KAAMoB,IAExB,yBAAKf,UAAU,kBAAf,qBAEF,yBAAKA,UAAU,sBCrCNmB,MAJf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61cd6618.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CountdownDisplay = ({ time: { day, hour, minute, second } }) => {\n  return (\n    <div className=\"time-container\">\n      <h2>Quarters BBQ</h2>\n      <div className=\"countdown-time\">\n        <div>\n          <p>{day}</p> days\n        </div>\n        <div>\n          <p>{hour}</p> hours\n        </div>\n        <div>\n          <p>{minute}</p> mins\n        </div>\n        <div>\n          <p>{second}</p> secs\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountdownDisplay;\n","import React, { useState } from \"react\";\nimport { DateTime, Duration } from \"luxon\";\n\nimport \"./countdown.css\";\nimport CountdownDisplay from \"./CountdownDisplay\";\n\nconst Countdown = () => {\n  const calculateDuration = time =>\n    Duration.fromObject({ milliseconds: time })\n      .toFormat(\"d h m s\")\n      .split(\" \");\n\n  const currentTime = DateTime.local();\n  const returnTime = DateTime.fromISO(\"2021-05-27T18:30:00\");\n  const difference = returnTime - currentTime;\n  const duration =\n    difference >= 0 ? calculateDuration(difference) : [0, 0, 0, 0];\n\n  const [timeRemaining, changeTimeRemaining] = useState({\n    day: duration[0],\n    hour: duration[1],\n    minute: duration[2],\n    second: duration[3]\n  });\n\n  if (difference > 0) {\n    const oneSecond = 1000;\n    const newDifference = difference - oneSecond;\n    const newDuration = calculateDuration(newDifference);\n\n    setTimeout(() => {\n      changeTimeRemaining({\n        day: newDuration[0],\n        hour: newDuration[1],\n        minute: newDuration[2],\n        second: newDuration[3]\n      });\n    }, 1000);\n  }\n\n  return (\n    <div className=\"countdown\">\n      {difference >= 0 ? (\n        <CountdownDisplay time={timeRemaining} />\n      ) : (\n        <div className=\"countdown-over\">The wait is over!</div>\n      )}\n      <div className=\"countdown-image\"></div>\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React from \"react\";\n\n// internal dependencies\nimport \"./App.css\";\nimport Countdown from \"./countdown/Countdown\";\n\nfunction App() {\n  return <Countdown />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}