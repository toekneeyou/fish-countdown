{"version":3,"sources":["countdown/Countdown.jsx","App.js","serviceWorker.js","index.js"],"names":["Countdown","useState","day","changeDay","hour","changeHour","minute","changeMinute","second","changeSecond","currentTime","DateTime","local","difference","fromISO","duration","Duration","fromObject","milliseconds","toFormat","split","useEffect","setTimeout","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RA2CeA,G,MAtCG,WAAO,IAAD,EACGC,mBAAS,MADZ,mBACfC,EADe,KACVC,EADU,OAEKF,mBAAS,MAFd,mBAEfG,EAFe,KAETC,EAFS,OAGSJ,mBAAS,MAHlB,mBAGfK,EAHe,KAGPC,EAHO,OAISN,mBAAS,MAJlB,mBAIfO,EAJe,KAIPC,EAJO,KAMhBC,EAAcC,WAASC,QAGvBC,EAFaF,WAASG,QAAQ,uBAEJJ,EAE1BK,EAAWC,WAASC,WAAW,CAAEC,aAAcL,IAClDM,SAAS,WACTC,MAAM,KAYT,OAVAC,qBAAU,WAERC,YAAW,WACTnB,EAAUY,EAAS,IACnBV,EAAWU,EAAS,IACpBR,EAAaQ,EAAS,IACtBN,EAAaM,EAAS,MALN,QAUlB,yBAAKQ,UAAU,aACb,yBAAKA,UAAU,mBAAf,2BACA,yBAAKA,UAAU,kBACb,8BAAOrB,EAAP,SACA,8BAAOE,EAAP,UACA,8BAAOE,EAAP,SACA,8BAAOE,EAAP,aC3BOgB,MAJf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.836317de.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DateTime, Duration } from \"luxon\";\n\nimport \"./countdown.css\";\n\nconst Countdown = () => {\n  const [day, changeDay] = useState(null);\n  const [hour, changeHour] = useState(null);\n  const [minute, changeMinute] = useState(null);\n  const [second, changeSecond] = useState(null);\n\n  const currentTime = DateTime.local();\n  const returnTime = DateTime.fromISO(\"2020-03-26T12:05:00\");\n\n  const difference = returnTime - currentTime;\n\n  const duration = Duration.fromObject({ milliseconds: difference })\n    .toFormat(\"d h m s\")\n    .split(\" \");\n\n  useEffect(() => {\n    const oneSecond = 1000;\n    setTimeout(() => {\n      changeDay(duration[0]);\n      changeHour(duration[1]);\n      changeMinute(duration[2]);\n      changeSecond(duration[3]);\n    }, oneSecond);\n  });\n\n  return (\n    <div className=\"countdown\">\n      <div className=\"countdown-title\">Days until Tony is back</div>\n      <div className=\"countdown-time\">\n        <span>{day} days</span>\n        <span>{hour} hours</span>\n        <span>{minute} mins</span>\n        <span>{second} secs</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React from \"react\";\n\n// internal dependencies\nimport \"./App.css\";\nimport Countdown from \"./countdown/Countdown\";\n\nfunction App() {\n  return <Countdown />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}